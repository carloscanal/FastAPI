Guion FastAPI (IWeb 2024/24)
============================

A) HelloWorld. Una app web inicial

    0) Comprobar python y version (3.10 o superior)

      * Abrir CMD como administrador
	
	python
	    quit()	# para salir

    1) Crear un helloworld.py

	from fastapi import FastAPI
	app = FastAPI()
	@app.get("/hello")
	async def hello():			# async es prescindible
	      return {"message": "Hello, world!"}

    2) Requisitos

	pip install fastAPI	# o python -m pip install fastAPI

      * o crear un requirements.txt con:

	uvicorn
	fastApi
	pydantic

	pip install -r requirements.txt

    3) Ejecutar con Uvicorn

	python -m uvicorn helloworld:app --reload --port 7000		# o simplemente uvicorn -- 

		# --reload para que recargue atomaticamente cambios en la app
		# --port para el puerto de despliegue (por defecto 8000)

      * lo vemos en el navegador (http://localhost:7000/hello) y en la consola del ordenador	


**** Ahora iremos creando una API REST con FastAPI

B) GETs con parametros de PATH y QUERY

    0) Crear un main.py a partir de hellowold.py, añadiendo

	from typing import Union	# typing, anotaciones de tipos

	api = FastAPI()			# como va a ser una api REST, la llamo así

	path = "/api/v1/"		# base de todos los paths


    1) GET a un PATH, sin variables (igual que antes)	

      * Punto 1 de main.py		# GET /api/v1/hola

	python -m uvicorn main:api --reload --port 8000		# así tenemos las dos apps
	
	http://localhost:8000/hola


    2) GET a un PATH, con variables

      * Punto 2 de main.py		# GET api/v1/hola/{nombre}

	@api.get(path + "hola/{nombre}")	# el parametro de PATH se indica entre llaves

	async def hola(nombre:str):		# el método asociado tiene un parámetro con el mismo nombre

       * esto se utilizaría para operaciones tipo GET {id}


    3) GET con parámetro de QUERY opcional

      * Punto 3 de main.py		# GET api/v2/hola?nombre=<nombre>	

       	from typing import Union

       	path = "/api/v2/"		# evita colision de paths cuando no hay parámetro de query (/hola)

       	@api.get(path + "hola")		# el parámetro de query no se indica en la anotacion

       	async def hola(nombre:Union[str,None]=None):	# si no hay parámetro recibimos None

      * probar con:

	http://localhost:8000/api/v2/hola			# { message

	http://localhost:8000/api/v2/hola?nombre=Carlos

      * Alternativa

        path = "/api/v3/"

	async def hola(nombre:str="mundo"):


    4) GET con variables de path y query: nombre, saludo

     * Punto 4 de main.py		# GET api/v3/hola/{nombre}?saludo=<saludo>

	
C) POST, PUT y DELETE

    5) POST con objeto nuevo en el body; código de estado por defecto (201)

    	from pydantic import BaseModel

	class Item(BaseModel):
	    nombre: str = "Anónimo"
	    desripcion: Union[str, None] = None
	    precio: int = 0

      * Punto 5 de main.py

	path = "/api/v4/"

	@api.post(path + "items", status_code=201)	# response status code por defecto 

	async def create_item(item: Item):		# el objeto del body nos llega como parámetro

      * Cómo podemos probarlo: con OpenAPI o con Postman

	- tengo una colección "Hola Mundo (FastAPI)"


    6) PUT con {id} y objeto en el body

      * Punto 6 de main.py; probar con Postman


    7) DELETE con {id} y código de estado condicionado

	from fastapi import FastAPI, Response

      * Punto 7 de main.py; probar con Postman


	
	
	






